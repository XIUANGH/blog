name: Deploy Hugo site to Pages

on:
  workflow_dispatch:
  push:
    branches: ["main"]

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      HUGO_VERSION: 0.134.2
    steps:
      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb          

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: Init Hugo Site
        run: |
          # 创建 Hugo 站点配置
          cat > config.toml <<EOL
          baseURL = 'https://XIUANGH.github.io/blog/'
          # 后续如果要自定义域名需要改为baseURL = 'https://example.com/'
          languageCode = 'zh-cn'
          title = 'Articles'
          theme = 'paper'

          [markup]
            [markup.goldmark]
              [markup.goldmark.renderer]
                unsafe = true
              [markup.goldmark.extensions]
                [markup.goldmark.extensions.passthrough]
                  enable = true
                  [markup.goldmark.extensions.passthrough.delimiters]
                    block = [['\[', '\]'], ['$$', '$$']]
                    inline = [['\(', '\)'],["$", "$"]]

          [params]
            github = 'XIUANGH'
            rss = true
            color = 'linen'
            math = true
            useUnicode = true
          
          [taxonomies]
            category = 'categories'
            tag = 'tags'
            
          [permalinks]
            posts = "/:filename/"

          EOL
          
          # 下载并设置主题
          git clone https://github.com/nanxiaobei/hugo-paper themes/paper

           # 将 MathJax 代码添加到主题的 single.html 模板
           mkdir -p layouts
          cp custom/single.html themes/paper/layouts/_default/single.html
          cp custom/math.html themes/paper/layouts/partials/math.html
          cp custom/head.html themes/paper/layouts/partials/head.html
          cp custom/index.html layouts/index.html
        

          

          # 创建内容目录结构
          mkdir -p content
          
          # 移动并组织 Markdown 文件
          find . -name "*.md" -not -path "./themes/*" -not -path "./archetypes/*" -not -path "./content/*" -not -path "./layouts/*" -not -path "./custom/*" | while read file; do
            # 获取相对路径
            rel_path=${file#./}
            dir_path=$(dirname "$rel_path")
            
            # 安全处理文件名用于URL - 但保留原始文件名作为标题
            safe_file_name=$(basename "$file" .md | iconv -t ASCII//TRANSLIT//IGNORE | sed -E 's/[^a-zA-Z0-9]+/-/g' | sed -E 's/^-+|-+$//g' | tr A-Z a-z)
            orig_title=$(basename "$file" .md)
            
            # 如果不是在根目录，创建对应的内容目录
            if [ "$dir_path" != "." ]; then
              mkdir -p "content/$dir_path"
              target_path="content/$dir_path/${safe_file_name}.md"
            else
              mkdir -p "content/posts"
              target_path="content/posts/${safe_file_name}.md"
            fi
            
            # 添加正确编码的Front Matter
            temp_file=$(mktemp)
            echo "---" > "$temp_file"
            echo "title: \"$orig_title\"" >> "$temp_file"
            echo "date: $(git log -1 --format=%aI -- \"$file\")" >> "$temp_file"
            echo "lastmod: $(git log -1 --format=%aI -- \"$file\")" >> "$temp_file"
            echo "url: \"$(basename \"$safe_file_name\")\"" >> "$temp_file"
            echo "---" >> "$temp_file"
            
            # 添加原始文件内容，但跳过已有的Front Matter
            if grep -q "^---" "$file"; then
              sed '1,/^---$/d;/^---$/,$!d;/^---$/d' "$file" >> "$temp_file"
            else
              cat "$file" >> "$temp_file"
            fi
            
            mkdir -p $(dirname "$target_path")
            mv "$temp_file" "$target_path"
          done
          
          # 处理图片文件，确保它们跟随 .md 文件一起移动
          find . -type f  -iname "*.png" -o -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.gif" -o -iname "*.svg" -not -path "./themes/*" -not -path "./archetypes/*" -not -path "./content/*" -not -path "./layouts/*" -not -path "./custom/*" | while read img; do
            # 获取相对路径
            rel_img_path=${img#./}
            img_dir=$(dirname "$rel_img_path")
            
            # 如果目录以 .assets 结尾，则去除该后缀
            target_dir=${img_dir%.assets}
            
            # 目标目录（与 Markdown 文件一致）
            if [ "$img_dir" != "." ]; then
              target_img_dir="content/$target_dir"
              mkdir -p "$target_img_dir"
              mv "$img" "$target_img_dir/"
            else
              target_img_dir="content/posts"
              mkdir -p "$target_img_dir"
              mv "$img" "$target_img_dir/"
            fi
          done
        
          tree
          

      - name: Build with Hugo
        env:
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
        run: hugo --gc --minify

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4