name: Deploy Hugo site to Pages

on:
  workflow_dispatch:
  push:
    branches: ["main"]

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      HUGO_VERSION: 0.134.2
    steps:
      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb          

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: Init Hugo Site
        run: |
          # ÂàõÂª∫ Hugo Á´ôÁÇπÈÖçÁΩÆ
          cat > config.toml <<EOL
          baseURL = 'https://XIUANGH.github.io/blog/'
          # ÂêéÁª≠Â¶ÇÊûúË¶ÅËá™ÂÆö‰πâÂüüÂêçÈúÄË¶ÅÊîπ‰∏∫baseURL = 'https://example.com/'
          languageCode = 'zh-cn'
          title = 'Articles'
          theme = 'paper'


          [markup]
            [markup.goldmark]
              [markup.goldmark.extensions]
                [markup.goldmark.extensions.passthrough]
                  enable = true
                  [markup.goldmark.extensions.passthrough.delimiters]
                    block = [['\[', '\]'], ['$$', '$$']]
                    inline = [['\(', '\)']]

          [params]
            github = 'XIUANGH'
            rss = true
            color = 'linen'
            math = true
          
          [taxonomies]
            category = 'categories'
            tag = 'tags'
            
          [markup.goldmark.renderer]
            unsafe = true
          EOL
          
          # ‰∏ãËΩΩÂπ∂ËÆæÁΩÆ‰∏ªÈ¢ò
          git clone https://github.com/nanxiaobei/hugo-paper themes/paper

           # Â∞Ü MathJax ‰ª£Á†ÅÊ∑ªÂä†Âà∞‰∏ªÈ¢òÁöÑ single.html Ê®°Êùø
          cat > themes/paper/layouts/_default/single.html <<EOL
          {{ define "main" }}

          <article>
            <header class="mb-14">
              <h1 class="!my-0 pb-2.5">{{ .Title }}</h1>

              {{ if ne .Type "page" }}
              <div class="text-xs antialiased opacity-60">
                {{ if .Date }}
                <time>{{ .Date | time.Format ":date_medium" }}</time>
                {{ end }}<!---->
                {{ $single_author := or .Params.Author site.Author.name }}
                <!---->
                {{ if $single_author }}
                <span class="mx-1">&middot;</span>
                <span>{{ $single_author }}</span>
                {{ end }}
              </div>
              {{ end }}
            </header>

            <section>{{ .Content }}</section>

            <!-- Post Tags -->
            {{ if .Params.tags }}
            <footer class="mt-12 flex flex-wrap">
              {{ range .Params.tags }} {{ $href := print (absURL "tags/") (urlize .) }}
              <a
                class="mb-1.5 ltr:mr-1.5 rtl:ml-1.5 rounded-lg bg-black/[3%] px-5 py-1 no-underline hover:bg-black/[6%] dark:bg-white/[8%] dark:hover:bg-white/[12%]"
                href="{{ $href }}"
                >{{ . }}</a
              >
              {{ end }}
            </footer>
            {{ end }}

            <!-- Post Nav -->
            {{ if not site.Params.disablePostNavigation }}<!---->
            {{ $pages := where site.RegularPages "Type" "in" site.Params.mainSections }}<!---->
            {{ if and (gt (len $pages) 1) (in $pages . ) }}
            <nav
              class="mt-24 flex overflow-hidden rounded-xl bg-black/[3%] text-lg !leading-[1.2] *:flex *:w-1/2 *:items-center *:p-5 *:font-medium *:no-underline dark:bg-white/[8%] [&>*:hover]:bg-black/[2%] dark:[&>*:hover]:bg-white/[3%]"
            >
              {{ with $pages.Next . }}
              <a class="ltr:pr-3 rtl:pl-3" href="{{ .Permalink }}"
                ><span class="ltr:mr-1.5 rtl:ml-1.5">‚Üê</span><span>{{ .Name }}</span></a
              >
              {{ end }}<!---->
              {{ with $pages.Prev . }}
              <a class="ltr:ml-auto rtl:mr-auto justify-end pl-3" href="{{ .Permalink }}"
                ><span>{{ .Name }}</span><span class="ltr:ml-1.5 rtl:mr-1.5">‚Üí</span></a
              >
              {{ end }}
            </nav>
            {{ end }}<!---->
            {{ end }}

            <!-- Disqus -->
            {{ if and site.Config.Services.Disqus.Shortname (not (eq .Params.comments
            false)) }}
            <div class="mt-24" id="disqus_thread"></div>
            <script>
              const disqusShortname = '{{ site.Config.Services.Disqus.Shortname }}';
              const script = document.createElement('script');
              script.src = 'https://' + disqusShortname + '.disqus.com/embed.js';
              script.setAttribute('data-timestamp', +new Date());
              document.head.appendChild(script);
            </script>
            {{ end }}

            <!-- GraphComment -->
            {{ if and site.Params.graphCommentId (not (eq .Params.comments false)) }}
            <div class="mt-24" id="graphcomment"></div>
            <script type="text/javascript">
              var __semio__params = {
                graphcommentId: '{{ site.Params.graphCommentId  }}',
                behaviour: {
                  //  uid: "...",
                },
                // configure your variables here
              };

              function __semio__onload() {
                __semio__gc_graphlogin(__semio__params);
              }

              (function () {
                var gc = document.createElement('script');
                gc.type = 'text/javascript';
                gc.async = true;
                gc.onload = __semio__onload;
                gc.defer = true;
                gc.src =
                  'https://integration.graphcomment.com/gc_graphlogin.js?' + Date.now();
                (
                  document.getElementsByTagName('head')[0] ||
                  document.getElementsByTagName('body')[0]
                ).appendChild(gc);
              })();
            </script>
            {{ end }}

            <!-- mermaid -->
            {{- partial "mermaid.html" . -}}

            <!-- giscus comment -->
            {{ if and site.Params.giscus.repo (not (eq .Params.comments false)) }}
            <div class="giscus mt-24"></div>
            <script
              src="https://giscus.app/client.js"
              data-repo="{{ site.Params.giscus.repo }}"
              data-repo-id="{{ site.Params.giscus.repoId }}"
              data-category="{{ site.Params.giscus.category }}"
              data-category-id="{{ site.Params.giscus.categoryId }}"
              data-mapping="{{ site.Params.giscus.mapping | default (print `pathname`) }}"
              data-strict="{{ site.Params.giscus.strict | default (print `1`) }}"
              data-reactions-enabled="{{ site.Params.giscus.reactionsEnabled | default (print `0`) }}"
              data-emit-metadata="{{ site.Params.giscus.emitMetadata | default (print `0`) }}"
              data-input-position="{{ site.Params.giscus.inputPosition | default (print `top`) }}"
              data-theme="{{ site.Params.giscus.theme | default (print `light`) }}"
              data-lang="{{ site.Params.giscus.lang | default (print `en`) }}"
              data-loading="{{ site.Params.giscus.loading | default (print `lazy`) }}"
              crossorigin="anonymous"
              async
            ></script>
            {{ end }}
          
          <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-chtml.js"></script>
          <script>
            MathJax = {
              tex: {
                displayMath: [['\\[', '\\]'], ['$$', '$$']],  // block
                inlineMath: [['\\(', '\\)']]                  // inline
              }
            };
          </script>
          
          </article>

          {{ end }}
          
          EOL
          
          # ÂàõÂª∫Ëá™ÂÆö‰πâ‰∏ªÈ°µÊ®°Êùø
          mkdir -p layouts
          cat > layouts/index.html <<EOL
          {{ define "main" }}
          <article class="post-single">
            <div class="post-content">
              <!-- ÊåâÊñá‰ª∂Â§πÁªìÊûÑÊòæÁ§∫ÊñáÁ´† -->
              {{ \$pages := .Site.RegularPages }}
              {{ \$sections := slice }}
              {{ range \$pages }}
                {{ \$section := path.Dir .File.Path }}
                {{ if and (ne \$section ".") (ne \$section "posts") }}
                  {{ if not (in \$sections \$section) }}
                    {{ \$sections = \$sections | append \$section }}
                  {{ end }}
                {{ end }}
              {{ end }}
              
              <!-- È¶ñÂÖàÊòæÁ§∫Ê†πÁõÆÂΩïÊñáÁ´† -->
              {{ \$rootPages := where \$pages "File.Dir" "posts/" }}
              {{ if \$rootPages }}
              <div class="folder">
                <ul>
                  {{ range sort \$rootPages "Title" }}
                    <li>
                      <a href="{{ .Permalink }}">{{ .Title }}</a>
                    </li>
                  {{ end }}
                </ul>
              </div>
              {{ end }}
              
              <!-- ÁÑ∂ÂêéÊòæÁ§∫ÂÖ∂‰ªñÊñá‰ª∂Â§π -->
              {{ range sort \$sections }}
                {{ \$section := . }}
                <div class="folder">
                  <h3>üìÅ {{ . }}</h3>
                  <ul>
                    {{ range sort (\$pages.ByTitle) }}
                      {{ if eq (path.Dir .File.Path) \$section }}
                        <li>
                          <a href="{{ .Permalink }}">{{ .Title }}</a>
                        </li>
                      {{ end }}
                    {{ end }}
                  </ul>
                </div>
              {{ end }}
            </div>
          </article>
          <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-chtml.js"></script>
          <script>
            MathJax = {
              tex: {
                displayMath: [['\\[', '\\]'], ['$$', '$$']],  // block
                inlineMath: [['\\(', '\\)']]                  // inline
              }
            };
          </script>
          
          <style>
          .folder {
            margin-bottom: 1.5rem;
            border-radius: var(--radius);
            background: var(--secondary);
          }
          .folder h3 {
            margin: 0;
            padding: 1rem;
            font-size: 1.1rem;
            border-bottom: 1px solid var(--border);
          }
          .folder ul {
            list-style: none;
            padding: 1rem;
            margin: 0;
          }
          .folder li {
            margin: 0.5rem 0;
          }
          .folder li a {
            text-decoration: none;
            color: var(--primary);
          }
          .folder li a:hover {
            text-decoration: underline;
          }
          </style>
          {{ end }}
          EOL

          

          # ÂàõÂª∫ÂÜÖÂÆπÁõÆÂΩïÁªìÊûÑ
          mkdir -p content
          
          # ÁßªÂä®Âπ∂ÁªÑÁªá Markdown Êñá‰ª∂
          find . -name "*.md" -not -path "./themes/*" -not -path "./archetypes/*" -not -path "./content/*" -not -path "./layouts/*" | while read file; do
            # Ëé∑ÂèñÁõ∏ÂØπË∑ØÂæÑ
            rel_path=${file#./}
            dir_path=$(dirname "$rel_path")
            
            # Â¶ÇÊûú‰∏çÊòØÂú®Ê†πÁõÆÂΩïÔºåÂàõÂª∫ÂØπÂ∫îÁöÑÂÜÖÂÆπÁõÆÂΩï
            if [ "$dir_path" != "." ]; then
              mkdir -p "content/$dir_path"
              target_path="content/$rel_path"
            else
              target_path="content/posts/$(basename "$rel_path")"
            fi
            
            # ÁßªÂä®Êñá‰ª∂Âπ∂Ê∑ªÂä†/Êõ¥Êñ∞ÂâçÁΩÆÊï∞ÊçÆ
            if [ -f "$file" ]; then
              title=$(basename "$file" .md)
              date=$(git log -1 --format=%aI -- "$file")
              lastmod=$(git log -1 --format=%aI -- "$file")
              
              # Â¶ÇÊûúÊñá‰ª∂Ê≤°Êúâ front matterÔºåÊ∑ªÂä†ÂÆÉ
              if ! grep -q "^---" "$file"; then
                temp_file=$(mktemp)
                echo "---" > "$temp_file"
                echo "title: \"$title\"" >> "$temp_file"
                echo "date: $date" >> "$temp_file"
                echo "lastmod: $lastmod" >> "$temp_file"
                echo "---" >> "$temp_file"
                cat "$file" >> "$temp_file"
                mkdir -p $(dirname "$target_path")
                mv "$temp_file" "$target_path"
              else
                mkdir -p $(dirname "$target_path")
                mv "$file" "$target_path"
              fi
            fi
          done

      - name: Build with Hugo
        env:
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
        run: hugo --gc --minify

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4